# vim: set filetype=zsh:

export DOTFILES_ROOT=$HOME/.dotfiles

# ================================================================================================
# oh-my-zsh configuration
# ================================================================================================

# Path to your oh-my-zsh configuration.
ZSH=$DOTFILES_ROOT/_plugins/oh-my-zsh
UPDATE_ZSH_DAYS=30
DISABLE_AUTO_TITLE="true"
DISABLE_CORRECTION="true"

plugins=(wd ruby mix)

source $ZSH/oh-my-zsh.sh

# ================================================================================================
# Topical Components
# ================================================================================================
# My dotfiles use a topical organizational scheme made popular by Zach Holman.
# All of the paths below are rooted wherever you installed these dotfiles
# ($HOME/.dotfiles by default).

# bin/
# Anything in bin/ will get added to your $PATH and be made available
# everywhere.
#
# <topic>/*.zsh
# Any files ending in .zsh get loaded into your environment.
#
# <topic>/path.zsh
# Any file named path.zsh is loaded first and is expected to
# setup $PATH or similar.
#
# <topic>/completion.zsh
# Any file named completion.zsh is loaded last and is
# expected to set up autocomplete.
#
# <topic>/*.symlink
# Any files ending in *.symlink get symlinked into your $HOME when you use the
# provided install script. This is so you can keep all of those versioned in
# your dotfiles but still keep those autoloaded files in your home directory.

# all of our zsh files (excluding /_plugins)
typeset -U config_files
setopt extended_glob
config_files=($DOTFILES_ROOT/^_plugins/**/*.zsh)

# Load the path files
#
# I hardcode the intial path so that tmux doesn't fuck it up and append duplicates
# Also allows you to `reload` without constantly appending to your path
case $(uname) in
  'Darwin')
    export PATH=/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/usr/texbin
    ;;
  'Linux')
    ;;
esac


for file in ${(M)config_files:#*/path.zsh}
do
  source $file
done

# load everything but the path and completion files
for file in ${${config_files:#*/path.zsh}:#*/completion.zsh}
do
  source $file
done

# initialize autocomplete here, otherwise functions won't be loaded
autoload -U compinit
compinit

# load every completion after autocomplete loads
for file in ${(M)config_files:#*/completion.zsh}
do
  source $file
done

unset config_files

# ================================================================================================
# OLD CONFIG
# Everything below this point is before I started using the scheme in the
# "Components" section above. Should be cut up and moved into the new scheme.
# ================================================================================================

# Disable the 'time' reserved keyword so /usr/bin/time works
# ¯\_(ツ)_/¯ I'm sure there's a better way to do this
disable -r time

# Base16 Shell
export BASE16_SHELL="$DOTFILES_ROOT/fonts_and_colorschemes/base16-default.dark-shell.sh"
[[ -s $BASE16_SHELL ]] && . $BASE16_SHELL

# ssh-agent for Linux
# Inits ssh-agent and reconnects to the same one if possible.
# Allows for single passphrase entry per session. This is
# handled by Keychain on OSX ---- OR IS IT? I don't even know anymore.
case $(uname) in
  'Linux')
    SSH_ENV="$HOME/.ssh/environment"

    function start_agent {
      echo "Initializing new SSH agent..."
      /usr/bin/ssh-agent | sed 's/^echo/#echo/' > "${SSH_ENV}"
      chmod 600 "${SSH_ENV}"
      . "${SSH_ENV}" > /dev/null
      ssh-add
    }

    # Source SSH settings, if applicable
    if [ -f "${SSH_ENV}" ]; then
      . "${SSH_ENV}" > /dev/null
      ps -ef | grep ${SSH_AGENT_PID} |
      grep ssh-agent$ > /dev/null || {
        start_agent;
      }
    else
      start_agent;
    fi
    ;;
esac

# Because it's not handled by keychain anymore? I have no idea.
export GPG_TTY=$(tty)

# TODO load a function directory instead of defining these here...
function add_warp_points {
  for dir in $1/*; do (cd "$dir" && wd add "${PWD##*/}"); done
}

function steep {
  open http://steep.it/$1minutes
}

code () { VSCODE_CWD="$PWD" open -n -b "com.microsoft.VSCode" --args $* ;}

if [ -f $HOME/.private-zshrc ]; then
  source $HOME/.private-zshrc
fi

qq() {
    clear

    logpath="$TMPDIR/q"
    if [[ -z "$TMPDIR" ]]; then
        logpath="/tmp/q"
    fi

    if [[ ! -f "$logpath" ]]; then
        echo 'Q LOG' > "$logpath"
    fi

    tail -100f -- "$logpath"
}

rmqq() {
    logpath="$TMPDIR/q"
    if [[ -z "$TMPDIR" ]]; then
        logpath="/tmp/q"
    fi
    if [[ -f "$logpath" ]]; then
        rm "$logpath"
    fi
    qq
}

difn() {
  docker images --format='{{.Repository}} {{.ID}}' | grep $1 | cut -d' ' -f2
}

drmi () {
    local flag=false
    OPTIND=1

    while getopts 'f' opt; do
        case $opt in
            f) flag=true ;;
            *) echo 'Error in command line parsing' >&2
               exit 1
        esac
    done
    shift "$(( OPTIND - 1 ))"

    local param1="$1"
    local param2="$2"

    if "$flag"; then
      docker images --format='{{.Repository}} {{.ID}}' | grep $1 | cut -d' ' -f2 | xargs docker image rm -f
    else
      docker images --format='{{.Repository}} {{.ID}}' | grep $1 | cut -d' ' -f2 | xargs docker image rm
    fi
}
