[user]
  name = AUTHORNAME
  email = AUTHOREMAIL
[commit]
	verbose = true
	template = ~/.gitmessage
[column]
	ui = auto
[branch]
	sort = -committerdate
[tag]
	sort = version:refname
[fetch]
	prune = true
	pruneTags = true
	all = true
[rebase]
	autoSquash = true
[color]
  diff = auto
  status = auto
  branch = auto
  ui = auto
[color "diff-highlight"]
  oldNormal = "red"
  oldHighlight = "160 52"
  newNormal = "green"
  newHighlight = "118 22"
[core]
  excludesfile = ~/.gitignore
  editor = zed -w
  autocrlf = input
  pager = delta
[interactive]
  diffFilter = delta --color-only
[delta]
  navigate = true    # use n and N to move between diff sections
  light = false      # set to true if you're in a terminal w/ a light background color (e.g. the default macOS terminal)
  line-numbers = true
[merge]
[diff]
  # compactionHeuristic = true
  colorMoved = default
	algorithm = histogram
[init]
  templatedir = ~/.git_template
	defaultBranch = main
[help]
	autocorrect = prompt
[pull]
  rebase = true
[push]
	default = simple
  verbose = true
	autoSetupRemote = true
	followTags = true
[credential]
  helper = osxkeychain
[advice]
  detachedHead = false
[rerere]
  enabled = true
[url "git@github.com:"]
  insteadOf = https://github.com/  ; Force no HTTPS ever
[alias]
  s = status
  cm = commit
  br = branch
  co = checkout
  co-pr = !sh -c 'git fetch origin pull/$1/head:pr/$1 && git checkout pr/$1' -
  ff = pull --ff --ff-only
  ffu = "!git pull --ff --ff-only upstream $(awk -F "/" '{print $NF}' .git/refs/remotes/origin/HEAD)"
  ffo = "!git pull --ff --ff-only origin $(awk -F "/" '{print $NF}' .git/refs/remotes/origin/HEAD)"
  df = diff
  dc = diff --cached
  lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr - %C(cyan)%ad%Cgreen)%Creset %C(bold blue)<%an>%Creset' --abbrev-commit --date=format-local:'%Y-%m-%d %I:%M %p'
  lgl = log --color --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
  lgp = lg --patch
  l = --no-pager lg -15
  ls = ls-files
  col = "!git checkout $(git branch | cut -c 3- | pick)"
  u = "!git add -u && git status"
  ua = "!git add --all && git status"
  cnf = "!git diff --name-only | uniq"
  amend = commit --amend --reuse-message=HEAD
  fix = "!$EDITOR $(git cnf)"
  a = "!git add --patch && git status"
  sls = "!git stash list | cat"
  ssave = "!git -c commit.gpgsign=false stash save"
  sshow = "!f() { if [ -z "$1" ]; then git stash list | cat; printf \"Index to show: \"; read choice; git stash show -p stash@{$choice}; else git stash show -p stash@{$1}; fi; }; f"
  spop = "!f() { if [ -z "$1" ]; then git stash list | cat; printf \"Index to pop: \"; read choice; git stash pop stash@{$choice}; else git stash pop stash@{$1}; fi; }; f"
  sapply = "!f() { if [ -z "$1" ]; then git stash list | cat; printf \"Index to apply: \"; read choice; git stash apply stash@{$choice}; else git stash apply stash@{$1}; fi; }; f"
  sdrop = "!f() { if [ -z "$1" ]; then git stash list | cat; printf \"Index to drop: \"; read choice; git stash drop stash@{$choice}; else git stash drop stash@{$1}; fi; }; f"
  sclear = "stash clear"
  clear-local-branches = "!git branch | grep -v "$(awk -F "/" '{print $NF}' .git/refs/remotes/origin/HEAD)" | xargs git branch -D"
  clear-merged-branches = "!f() { git checkout --quiet $(awk -F "/" '{print $NF}' .git/refs/remotes/origin/HEAD) && git branch --merged | grep --invert-match '\\*' | xargs -n 1 git branch --delete; git checkout --quiet @{-1}; }; f"
  aliases = "!git config --list | grep 'alias\\.' | sed 's/alias\\.\\([^=]*\\)=\\(.*\\)/\\1\\\t => \\2/' | sort"

  # Honorable Mentions
  # Unused, but may be useful for others
  # ----------------------------------------

  # addprx courtesy @mitsuhiko
  #  arminlog = log --pretty=format:"%C(auto,yellow)%h%C(auto)%d\\ %C(auto,reset)%s\\ \\ [%C(auto,blue)%cn%C(auto,reset),\\ %C(auto,cyan)%ar%C(auto,reset)]"
  #  addprx = "!f() { b=`git symbolic-ref -q --short HEAD` && \
  #    git fetch origin pull/$1/head:pr/$1 && \
  #    git fetch -f origin pull/$1/merge:PR_MERGE_HEAD && \
  #    git rebase --onto $b PR_MERGE_HEAD^ pr/$1 && \
  #    git branch -D PR_MERGE_HEAD && \
  #    git checkout $b && echo && \
  #    git diff --stat $b..pr/$1 && echo && \
  #    git arminlog $b..pr/$1; }; f"

  # lol = log --graph --decorate --pretty=oneline --abbrev-commit
  # lola = log --graph --decorate --pretty=oneline --abbrev-commit --all
  # sapplyr = "!f() { git stash apply stash^{/$*}; }; f"
  # sshowr = "!f() { git stash show stash^{/$*} -p; }; f"
  #
  # My old 'checkoutlist' command; replaced by fuzzy search provided by thoughtbot/pick
  # col = "!select choice in $(git branch | grep -v '*'); do echo checking out $choice; git checkout $choice; break; done"
